#! /usr/bin/env ruby

#########################################
# playing around with the cloudstack
# api, (C) 2012, Nik Wolfgramm
#

require 'yaml'
require 'rainbow'
require File.join(File.dirname(__FILE__), 'lib', 'cloudstack_client')
require File.join(File.dirname(__FILE__), 'lib', 'ssh_command')

default_options = {
  cloudstack_url: '',
  cloudstack_api_key: '',
  cloudstack_secret_key: ''
}

#########################################
# Load API secrets from config file
#
config_file = File.join(File.dirname(__FILE__), 'config', 'cloudstack.yml')
begin
  options = default_options.merge YAML::load(IO.read(config_file))
rescue Exception => e
  puts "Unable to load '#{config_file}' : #{e}".color(:red)
  exit
end

#########################################
# defining helper functions
#
def print_options(options, attr = 'name')
  options.to_enum.with_index(1).each do |option, i|
    puts "#{i}: #{option[attr]}"
  end 	
end

def execute_ssh_commands(server_connection)
  puts "type exit if you are tired typing commands"
  puts "Enter a command:".background(:blue)
  command = gets.chomp
  return if command == "exit" 
  SshCommand.run(server_connection, command) do |output|
    puts output.color(:green)
  end
  execute_ssh_commands(server_connection)
end

begin
  #######################################
  # Create a connection using the
  # CloudStack client
  #
  cs = CloudstackClient::Connection.new(
    options[:cloudstack_url],
    options[:cloudstack_api_key],
    options[:cloudstack_secret_key]
  )
  server_offerings = cs.list_service_offerings
  templates = cs.list_templates('featured')
  networks = cs.list_networks
  zones = cs.list_zones
rescue SystemExit, Interrupt
  raise
rescue Exception => e
  puts
  puts "Error connecting to cloudstack:"
  puts e.message
  exit
end

trap("SIGINT") { throw :ctrl_c }
begin
  #########################################
  # Run command over the cloudtsack api
  #
  puts
  puts %{We are going to deploy a new server on #{options[:cloudstack_url]} and...
   - asign a public IP address
   - create a firewall rule for SSH and HTTP access
   - connect to the server and install the puppet client}.color(:magenta)
  puts

  print "Please provide a name for the new server".background(:blue)
  puts " (spaces or special characters are NOT allowed): "
  server_name = gets.chomp

  puts "Select a computing offering:".background(:blue)
  print_options(server_offerings)
  service_offering = gets.chomp.to_i - 1

  puts "Select a template:".background(:blue)
  print_options(templates)
  template = gets.chomp.to_i - 1

  puts "Select a network:".background(:blue)
  print_options(networks)
  network = gets.chomp.to_i - 1

  puts "Select a availability zone:".background(:blue)
  print_options(zones)
  zone = gets.chomp.to_i - 1

  puts
  puts "Create a new server on CloudStack...".color(:yellow) + " (#{options[:cloudstack_url]})"
  server = cs.create_server(
		  server_name,
		  server_offerings[service_offering]["name"],
		  templates[template]["name"],
		  zones[zone]["name"],
		  [networks[network]["name"]]
	  )
  puts
  puts "server #{server["name"]} has been created.".color(:green)

  puts
  puts "Make sure the server is running...".color(:yellow)
  cs.wait_for_server_state(server["id"], "Running")
  puts "OK!".color(:green)

  puts
  puts "Associate an IP address on the CloudStack firewall for the server...".color(:yellow)
  ip_addr = cs.associate_ip_address(networks[network]["id"])
  puts
  puts "IP is #{ip_addr["ipaddress"]}".color(:green)

  puts
  puts "Create port forwarding rule for ssh access on the CloudStack firewall...".color(:yellow)
  cs.create_port_forwarding_rule(ip_addr["id"], 22, 'TCP', 22, server["id"])
  puts

  puts
  puts "Create port forwarding rule for HTTP access on the CloudStack firewall...".color(:yellow)
  cs.create_port_forwarding_rule(ip_addr["id"], 80, 'TCP', 80, server["id"])
  puts
  
  puts
  puts "Install the puppet client"
  server_connection = { host: ip_addr["ipaddress"], username: "root", password: "blahblah" }
  SshCommand.run(server_connection, "yum install puppet") do |output|
    puts output.color(:green)
  end
  puts

  puts 
  puts "Create a cert request on the client"
  server_connection = { host: ip_addr["ipaddress"], username: "root", password: "blahblah" }
  SshCommand.run(server_connection, "puppet agent --test --waitforcert=0") do |output|
    puts output.color(:green)
  end
  puts

  puts
  puts "Sign sort on the puppetmaster"
  sign_output = %x[puppet cert --sign #{server_name}]
  puts sign_output
  puts

  puts
  puts "Puppet should run now on #{server_name}:"
  server_connection = { host: ip_addr["ipaddress"], username: "root", password: "blahblah" }
  SshCommand.run(server_connection, "puppet agent --test") do |output|
    puts output.color(:green)
  end
  puts

  puts "Finish!".color(:green)
rescue SystemExit, Interrupt
  raise
rescue Exception => e
  puts
  puts "received exit signal - bye!"
end
